tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://cloudify.co/spec/cloudify/4.5.5/types.yaml
  - plugin:cloudify-gcp-plugin
  - plugin:cloudify-ansible-plugin
  - plugin:cloudify-utilities-plugin
  - includes/ansible.yaml
  - includes/ansible_db.yaml

inputs:

  gcp_region_name:
    type: string
    description: The GCP region to deploy the application in, such as europe-west1.
    default: us-east4

  gcp_zone_name:
    type: string
    description: The GCP zone to deploy the application in, such as europe-west1-a.
    default: { concat: [ { get_input: gcp_region_name }, '-c' ] }

  image:
    type: string
    description: A Ubuntu Trusty 14.04 image.
    default: https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/images/ubuntu-1404-trusty-v20170517

  instance_type:
    type: string
    description: A small GCP machine type.
    default: f1-micro

  agent_user:
    description: The username of the agent running on the instance created from the image.
    default: 'manager'

  db_name:
    type: string
    description: Database.
    default: wordpress

  db_user:
    type: string
    description: Database User.
    default: wordpress

  db_pass:
    type: string
    description: Database User password.
    default: w@rdpr3sS

dsl_definitions:

  client_config: &gcp_config
    auth:
      type: service_account
      auth_uri: https://accounts.google.com/o/oauth2/auth
      token_uri: https://accounts.google.com/o/oauth2/token
      auth_provider_x509_cert_url: https://www.googleapis.com/oauth2/v1/certs
      client_x509_cert_url: { get_secret: gcp_client_x509_cert_url }
      client_email: { get_secret: gcp_client_email }
      client_id: { get_secret: gcp_client_id }
      project_id: { get_secret: gcp_project_id }
      private_key_id: { get_secret: gcp_private_key_id }
      private_key: { get_secret: gcp_private_key }
    project: { get_secret: gcp_project_id }
    zone: { get_input: gcp_zone_name }

node_templates:

  ##################
  # Common
  #################

  ##################
  # Network Layer
  #################

  firewall:
    type: cloudify.gcp.nodes.FirewallRule
    properties:
      gcp_config: *gcp_config
      allowed:
        tcp:
          - 22
          - 80
          - 3306
      sources:
        - 0.0.0.0/0
    relationships:
      - type: cloudify.relationships.connected_to
        target: network

  subnet:
    type: cloudify.gcp.nodes.SubNetwork
    properties:
      region: { get_input: gcp_region_name }
      subnet: 10.11.12.0/22
      gcp_config: *gcp_config
    relationships:
    - type: cloudify.gcp.relationships.contained_in_network
      target: network

  network:
    type: cloudify.gcp.nodes.Network
    properties:
      gcp_config: *gcp_config
      auto_subnets: false

  ##################
  # Database Layer
  #################

  vm-database:
    type: cloudify.gcp.nodes.Instance
    properties:
      name: wordpressdatabase
      gcp_config: *gcp_config
      agent_config:
        install_method: none
        key: { get_secret: agent_key_private }
        user: { get_input: agent_user }
      use_public_ip: true
      image_id: { get_input: image }
      instance_type: { get_input: instance_type }
      zone: { get_input: gcp_zone_name }
      external_ip: true
    relationships:
    - type: cloudify.relationships.depends_on
      target: subnet
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: scripts/gcp/key.py
          executor: central_deployment_agent
          inputs:
            user: { get_input: agent_user }
            ssh_keys:
            - { get_secret: agent_key_public }


  ##################
  # App Layer
  #################

  vm-app1:
    type: cloudify.gcp.nodes.Instance
    properties:
      name: wordpressapp1
      gcp_config: *gcp_config
      agent_config:
        install_method: none
        key: { get_secret: agent_key_private }
        user: { get_input: agent_user }
      use_public_ip: true
      image_id: { get_input: image }
      instance_type: { get_input: instance_type }
      zone: { get_input: gcp_zone_name }
      external_ip: true
    relationships:
    - type: cloudify.relationships.depends_on
      target: subnet
    - type: cloudify.relationships.depends_on
      target: vm-database
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: scripts/gcp/key.py
          executor: central_deployment_agent
          inputs:
            user: { get_input: agent_user }
            ssh_keys:
            - { get_secret: agent_key_public }

  vm-app2:
    type: cloudify.gcp.nodes.Instance
    properties:
      name: wordpressapp2
      gcp_config: *gcp_config
      agent_config:
        install_method: none
        key: { get_secret: agent_key_private }
        user: { get_input: agent_user }
      use_public_ip: true
      image_id: { get_input: image }
      instance_type: { get_input: instance_type }
      zone: { get_input: gcp_zone_name }
      external_ip: true
    relationships:
    - type: cloudify.relationships.depends_on
      target: subnet
    - type: cloudify.relationships.depends_on
      target: vm-database
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: scripts/gcp/key.py
          executor: central_deployment_agent
          inputs:
            user: { get_input: agent_user }
            ssh_keys:
            - { get_secret: agent_key_public }

outputs:

  application_endpoint1:
    description: The external endpoint of the application.
    value: { concat: [ 'http://', { get_attribute: [ vm-app1, ip ] }, ':80' ] }

  application_endpoint2:
    description: The external endpoint of the application.
    value: { concat: [ 'http://', { get_attribute: [ vm-app2, ip ] }, ':80' ] }

  outdatabase:
    description: The external endpoint of the database.
    value: { concat: [ '', { get_attribute: [ vm-database, ip ] }, '' ] }
